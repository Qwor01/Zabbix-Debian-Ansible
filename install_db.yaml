---
- name: Setup Zabbix MySQL on Proxmox VM
  hosts: ZabbixDB 
  become: yes
  vars_files:
    - ./vars.yaml

  tasks:
    - name: Get zabbix package
      shell: "wget https://repo.zabbix.com/zabbix/{{ zabbix_server_version }}/debian/pool/main/z/zabbix-release/zabbix-release_latest_{{ zabbix_server_version }}+debian12_all.deb"

    - name: Install zabbix packages
      shell: "dpkg -i zabbix-release_latest_{{ zabbix_server_version }}+debian12_all.deb"
    
    - name: Update apt cache
      apt:
          update_cache: yes

    - name: Install required packages (MariaDB and Zabbix SQL scripts)
      apt:
        name:
          - mariadb-server
          - zabbix-sql-scripts
        state: present
        update_cache: yes

    - name: Configure MariaDB to listen on all interfaces
      lineinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '^bind-address'
        line: 'bind-address = 0.0.0.0'
        state: present
        backup: yes

    - name: Restart MariaDB to apply config changes
      service:
        name: mariadb
        state: restarted

    - name: Ensure MariaDB is started and enabled
      service:
        name: mariadb
        state: started
        enabled: yes
    
    - name: Check if MariaDB root has no password
      shell: |
        mysql -u root -e "SELECT 1;" > /dev/null 2>&1 && echo 'no_password' || echo 'has_password'
      register: mariadb_root_password_check
      changed_when: false

    - name: Set MariaDB root password only if currently blank
      shell: |
        mysql -u root -e "ALTER USER 'root'@'{{ zabbix_db_host }}' IDENTIFIED BY '{{ mariadb_root_password }}'; FLUSH PRIVILEGES;"
      when: "'no_password' in mariadb_root_password_check.stdout"


    - name: Create Zabbix database
      community.mysql.mysql_db:
        name: zabbix
        encoding: utf8mb4
        collation: utf8mb4_bin
        state: present
        login_user: root
        login_password: "{{ mariadb_root_password }}"

    - name: Create Zabbix user for frontend (192.168.0.203)
      community.mysql.mysql_user:
        name: zabbix
        host: "{{ zabbix_front_host }}"
        password: "{{ zabbix_db_password }}"
        priv: "zabbix.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mariadb_root_password }}"

    - name: Create Zabbix user for backend (192.168.0.71)
      community.mysql.mysql_user:
        name: zabbix
        host: "{{ zabbix_server_host }}"
        password: "{{ zabbix_db_password }}"
        priv: "zabbix.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mariadb_root_password }}"


    - name: Enable log_bin_trust_function_creators
      community.mysql.mysql_variables:
        variable: log_bin_trust_function_creators
        value: 1
        login_user: root
        login_password: "{{ mariadb_root_password }}"
    
    - name: Increase max_allowed_packet and wait_timeout for import
      community.mysql.mysql_variables:
        variable: "{{ item.variable }}"
        value: "{{ item.value }}"
        login_user: root
        login_password: "{{ mariadb_root_password }}"
      loop:
        - { variable: max_allowed_packet, value: 268435456 }  # 256MB
        - { variable: wait_timeout, value: 600 }
        - { variable: interactive_timeout, value: 600 }


    - name: Ensure Zabbix schema is imported into MariaDB
      shell: |
        if [ -f /usr/share/zabbix-sql-scripts/mysql/server.sql.gz ]; then
          zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uzabbix -p{{ zabbix_db_password }} zabbix
        else
          echo "SQL file not found"
          exit 1
        fi
      args:
        executable: /bin/bash
      register: import_result
      failed_when: import_result.rc != 0 or "'ERROR'" in import_result.stderr
      no_log: true


        

    - name: Reset max_allowed_packet and timeouts after schema import
      community.mysql.mysql_variables:
        variable: "{{ item.variable }}"
        value: "{{ item.value }}"
        login_user: root
        login_password: "{{ mariadb_root_password }}"
      loop:
        - { variable: max_allowed_packet, value: 16777216 }  # Default 16MB
        - { variable: wait_timeout, value: 28800 }           # Default 8 hours
        - { variable: interactive_timeout, value: 28800 }

    - name: Disable log_bin_trust_function_creators
      community.mysql.mysql_variables:
        variable: log_bin_trust_function_creators
        value: 0
        login_user: root
        login_password: "{{ mariadb_root_password }}"

    - name: Ensure MariaDB is started and enabled
      service:
        name: mariadb
        state: restarted
        enabled: yes